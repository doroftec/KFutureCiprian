package it.kirey.kfuture.entity;
// Generated 03-Oct-2016 09:46:32 by Hibernate Tools 5.1.0.Beta1

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;


/**
 * AmReportBookings generated by hbm2java
 */
@Entity
@Table(name = "AM_REPORT_BOOKINGS")
public class AmReportBookings implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private Integer id;
	
	/*@JsonManagedReference(value = "report_bookingses")*/
	private AmReports amReports;
	@JsonIgnore
	private AmUserAccounts amUserAccountsByUtInsert;
	@JsonIgnore
	private AmUserAccounts amUserAccountsByUtUpdate;
	private Date deadline;
	private String format;
	private String status;
	private Date tsInsert;
	private Date tsUpdate;
	
	@JsonManagedReference
	private AmReportBookingBlobs amReportBookingBlobs;
	
	@JsonManagedReference(value="booking_parameters")
	private List<AmReportBookingParameters> amReportBookingParameterses;

	public AmReportBookings() {
	}

	public AmReportBookings(Integer id, AmReports amReports, AmUserAccounts amUserAccountsByUtInsert,
			AmUserAccounts amUserAccountsByUtUpdate, Date deadline, String status, Date tsInsert, Date tsUpdate) {
		this.id = id;
		this.amReports = amReports;
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
		this.deadline = deadline;
		this.status = status;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
	}

	public AmReportBookings(Integer id, AmReports amReports, AmUserAccounts amUserAccountsByUtInsert,
			AmUserAccounts amUserAccountsByUtUpdate, Date deadline, String format, String status, Date tsInsert,
			Date tsUpdate, AmReportBookingBlobs amReportBookingBlobs,
			List<AmReportBookingParameters> amReportBookingParameterses) {
		this.id = id;
		this.amReports = amReports;
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
		this.deadline = deadline;
		this.format = format;
		this.status = status;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
		this.amReportBookingBlobs = amReportBookingBlobs;
		this.amReportBookingParameterses = amReportBookingParameterses;
	}

	@Id
	@SequenceGenerator(name = "reportbooking_gen", sequenceName = "SEQ_AM_REPORT_BOOKINGS", allocationSize = 1, initialValue = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "reportbooking_gen")
	@Column(name = "ID", unique = true, nullable = false, precision = 10, scale = 0)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "AM_REPORT", nullable = false)
	public AmReports getAmReports() {
		return this.amReports;
	}

	public void setAmReports(AmReports amReports) {
		this.amReports = amReports;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UT_INSERT", nullable = false)
	public AmUserAccounts getAmUserAccountsByUtInsert() {
		return this.amUserAccountsByUtInsert;
	}

	public void setAmUserAccountsByUtInsert(AmUserAccounts amUserAccountsByUtInsert) {
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UT_UPDATE", nullable = false)
	public AmUserAccounts getAmUserAccountsByUtUpdate() {
		return this.amUserAccountsByUtUpdate;
	}

	public void setAmUserAccountsByUtUpdate(AmUserAccounts amUserAccountsByUtUpdate) {
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
	}

	@Column(name = "DEADLINE", nullable = false, length = 7)
	public Date getDeadline() {
		return this.deadline;
	}

	public void setDeadline(Date deadline) {
		this.deadline = deadline;
	}

	@Column(name = "FORMAT", length = 50)
	public String getFormat() {
		return this.format;
	}

	public void setFormat(String format) {
		this.format = format;
	}

	@Column(name = "STATUS", nullable = false, length = 30)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "TS_INSERT", nullable = false)
	public Date getTsInsert() {
		return this.tsInsert;
	}

	public void setTsInsert(Date tsInsert) {
		this.tsInsert = tsInsert;
	}

	@Column(name = "TS_UPDATE", nullable = false)
	public Date getTsUpdate() {
		return this.tsUpdate;
	}

	public void setTsUpdate(Date tsUpdate) {
		this.tsUpdate = tsUpdate;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "amReportBookings")
	public AmReportBookingBlobs getAmReportBookingBlobs() {
		return this.amReportBookingBlobs;
	}

	public void setAmReportBookingBlobs(AmReportBookingBlobs amReportBookingBlobs) {
		this.amReportBookingBlobs = amReportBookingBlobs;
	}

	@OneToMany(mappedBy = "amReportBookings")
	@LazyCollection(LazyCollectionOption.FALSE)
	@Cascade(value=CascadeType.ALL)
	public List<AmReportBookingParameters> getAmReportBookingParameterses() {
		return this.amReportBookingParameterses;
	}

	public void setAmReportBookingParameterses(List<AmReportBookingParameters> amReportBookingParameterses) {
		this.amReportBookingParameterses = amReportBookingParameterses;
	}

}
