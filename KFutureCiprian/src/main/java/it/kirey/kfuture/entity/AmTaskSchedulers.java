package it.kirey.kfuture.entity;
// Generated Sep 22, 2016 3:00:20 PM by Hibernate Tools 5.1.0.CR1

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * AmTaskSchedulers generated by hbm2java
 */
@Entity
@Table(name = "AM_TASK_SCHEDULERS", uniqueConstraints = @UniqueConstraint(columnNames = "NAME"))
public class AmTaskSchedulers implements java.io.Serializable {

	private static final long serialVersionUID = 1009132725285112936L;
	
	private Integer id;
	private AmUserAccounts amUserAccountsByUtInsert;
	private AmUserAccounts amUserAccountsByUtUpdate;
	private String name;
	private String cronExpression;
	private Date tsInsert;
	private Date tsUpdate;
	private Date lastExecutionTime;
	private Date nextExecutionTime;
	private String triggerName;
	private List<AmJobTraces> amJobTraceses = new ArrayList<AmJobTraces>(0);

	public AmTaskSchedulers() {
	}

	public AmTaskSchedulers(Integer id, AmUserAccounts amUserAccountsByUtInsert,
			AmUserAccounts amUserAccountsByUtUpdate, String name, Date tsInsert, Date tsUpdate, String triggerName) {
		this.id = id;
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
		this.name = name;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
		this.triggerName = triggerName;
	}

	public AmTaskSchedulers(Integer id, AmUserAccounts amUserAccountsByUtInsert,
			AmUserAccounts amUserAccountsByUtUpdate, String name, String cronExpression, Date tsInsert, Date tsUpdate,
			Date lastExecutionTime, Date nextExecutionTime, String triggerName, List<AmJobTraces> amJobTraceses) {
		this.id = id;
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
		this.name = name;
		this.cronExpression = cronExpression;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
		this.lastExecutionTime = lastExecutionTime;
		this.nextExecutionTime = nextExecutionTime;
		this.triggerName = triggerName;
		this.amJobTraceses = amJobTraceses;
	}

	@Id
	@SequenceGenerator(name = "SEQ_AM_TASK_SCHEDULERS_GEN", sequenceName = "SEQ_AM_TASK_SCHEDULERS", allocationSize = 1, initialValue = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SEQ_AM_TASK_SCHEDULERS_GEN")
	@Column(name = "ID", unique = true, nullable = false, precision = 10, scale = 0)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UT_INSERT", nullable = false)
	public AmUserAccounts getAmUserAccountsByUtInsert() {
		return this.amUserAccountsByUtInsert;
	}

	public void setAmUserAccountsByUtInsert(AmUserAccounts amUserAccountsByUtInsert) {
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UT_UPDATE", nullable = false)
	public AmUserAccounts getAmUserAccountsByUtUpdate() {
		return this.amUserAccountsByUtUpdate;
	}

	public void setAmUserAccountsByUtUpdate(AmUserAccounts amUserAccountsByUtUpdate) {
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
	}

	@Column(name = "NAME", unique = true, nullable = false, length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "CRON_EXPRESSION")
	public String getCronExpression() {
		return this.cronExpression;
	}

	public void setCronExpression(String cronExpression) {
		this.cronExpression = cronExpression;
	}

	@Column(name = "TS_INSERT", nullable = false)
	public Date getTsInsert() {
		return this.tsInsert;
	}

	public void setTsInsert(Date tsInsert) {
		this.tsInsert = tsInsert;
	}

	@Column(name = "TS_UPDATE", nullable = false)
	public Date getTsUpdate() {
		return this.tsUpdate;
	}

	public void setTsUpdate(Date tsUpdate) {
		this.tsUpdate = tsUpdate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "LAST_EXECUTION_TIME", length = 7)
	public Date getLastExecutionTime() {
		return this.lastExecutionTime;
	}

	public void setLastExecutionTime(Date lastExecutionTime) {
		this.lastExecutionTime = lastExecutionTime;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "NEXT_EXECUTION_TIME", length = 7)
	public Date getNextExecutionTime() {
		return this.nextExecutionTime;
	}

	public void setNextExecutionTime(Date nextExecutionTime) {
		this.nextExecutionTime = nextExecutionTime;
	}

	@Column(name = "TRIGGER_NAME", unique = true, nullable = false, length = 50)
	public String getTriggerName() {
		return this.triggerName;
	}

	public void setTriggerName(String triggerName) {
		this.triggerName = triggerName;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amTaskSchedulers")
	public List<AmJobTraces> getAmJobTraceses() {
		return this.amJobTraceses;
	}

	public void setAmJobTraceses(List<AmJobTraces> amJobTraceses) {
		this.amJobTraceses = amJobTraceses;
	}

}
