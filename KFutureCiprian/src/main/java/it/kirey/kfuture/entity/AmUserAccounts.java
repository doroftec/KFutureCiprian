package it.kirey.kfuture.entity;
// Generated 04-Oct-2016 14:40:16 by Hibernate Tools 5.2.0.Beta1

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * AmUserAccounts generated by hbm2java
 */
@Entity
@Table(name = "AM_USER_ACCOUNTS", uniqueConstraints = @UniqueConstraint(columnNames = "USERNAME"))
public class AmUserAccounts implements java.io.Serializable, UserDetails {

	private Integer id;
	private Long timestamp;
	@JsonIgnore
	private AmUserAccounts amUserAccountsByUtUpdate;
	@JsonIgnore
	private AmUserAccounts amUserAccountsByUtInsert;
	private String username;
	@JsonIgnore
	private String password;
	private String email;
	private Long timeout;
	private String token;
	private String defaultLanguage;
	private Date tsInsert;
	private Date tsUpdate;
	@JsonManagedReference
	private List<AmApplicationRoles> amApplicationRoleses = new ArrayList<AmApplicationRoles>(0);
	@JsonIgnore
	private List<AmEmailTemplates> amEmailTemplatesesForUtInsert = new ArrayList<AmEmailTemplates>(0);
	@JsonIgnore
	private List<AmErrorLogs> amErrorLogses = new ArrayList<AmErrorLogs>(0);
	@JsonIgnore
	private List<AmReportParameters> amReportParametersesForUtInsert = new ArrayList<AmReportParameters>(0);
	@JsonIgnore
	private List<AmJobTraces> amJobTracesesForUtUpdate = new ArrayList<AmJobTraces>(0);
	@JsonIgnore
	private List<AmUserAccounts> amUserAccountsesForUtUpdate = new ArrayList<AmUserAccounts>(0);
	@JsonIgnore
	private List<AmReportBookingBlobs> amReportBookingBlobsesForUtInsert = new ArrayList<AmReportBookingBlobs>(0);
	@JsonIgnore
	private List<AmTaskSchedulers> amTaskSchedulersesForUtInsert = new ArrayList<AmTaskSchedulers>(0);
	@JsonIgnore
	private List<AmApplicationRoles> amApplicationRolesesForUtUpdate = new ArrayList<AmApplicationRoles>(0);
	@JsonIgnore
	private List<AmReportParameters> amReportParametersesForUtUpdate = new ArrayList<AmReportParameters>(0);
	@JsonIgnore
	private List<AmCompanies> amCompaniesesForUtInsert = new ArrayList<AmCompanies>(0);
	@JsonIgnore
	private List<AmEmailTemplates> amEmailTemplatesesForUtUpdate = new ArrayList<AmEmailTemplates>(0);
	@JsonIgnore
	private List<AmReports> amReportsesForUtUpdate = new ArrayList<AmReports>(0);
	@JsonIgnore
	private List<AmEmailConfigs> amEmailConfigsesForUtInsert = new ArrayList<AmEmailConfigs>(0);
	@JsonIgnore
	private List<AmCompanies> amCompaniesesForUtUpdate = new ArrayList<AmCompanies>(0);
	@JsonIgnore
	private List<AmReportBookings> amReportBookingsesForUtInsert = new ArrayList<AmReportBookings>(0);
	@JsonIgnore
	private List<AmCompanies> amCompanieses = new ArrayList<AmCompanies>(0);
	@JsonIgnore
	private List<AmEmailConfigs> amEmailConfigsesForUtUpdate = new ArrayList<AmEmailConfigs>(0);
	@JsonIgnore
	private List<AmReportBookingBlobs> amReportBookingBlobsesForUtUpdate = new ArrayList<AmReportBookingBlobs>(0);
	@JsonIgnore
	private List<AmUserAccounts> amUserAccountsesForUtInsert = new ArrayList<AmUserAccounts>(0);
	@JsonIgnore
	private List<AmTaskSchedulers> amTaskSchedulersesForUtUpdate = new ArrayList<AmTaskSchedulers>(0);
	@JsonIgnore
	private List<AmReports> amReportsesForUtInsert = new ArrayList<AmReports>(0);
	@JsonIgnore
	private List<AmReportBookings> amReportBookingsesForUtUpdate = new ArrayList<AmReportBookings>(0);
	@JsonIgnore
	private List<AmJobTraces> amJobTracesesForUtInsert = new ArrayList<AmJobTraces>(0);
	@JsonIgnore
	private List<AmApplicationRoles> amApplicationRolesesForUtInsert = new ArrayList<AmApplicationRoles>(0);

	public AmUserAccounts() {
	}

	public AmUserAccounts(Integer id, String username, String password, String email, Date tsInsert, Date tsUpdate) {
		this.id = id;
		this.username = username;
		this.password = password;
		this.email = email;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
	}

	public AmUserAccounts(Integer id, AmUserAccounts amUserAccountsByUtUpdate, AmUserAccounts amUserAccountsByUtInsert,
			String username, String password, String email, Long timeout, String token, String defaultLanguage,
			Date tsInsert, Date tsUpdate, List<AmEmailTemplates> amEmailTemplatesesForUtInsert,
			List<AmErrorLogs> amErrorLogses, List<AmReportParameters> amReportParametersesForUtInsert,
			List<AmJobTraces> amJobTracesesForUtUpdate, List<AmUserAccounts> amUserAccountsesForUtUpdate,
			List<AmReportBookingBlobs> amReportBookingBlobsesForUtInsert,
			List<AmTaskSchedulers> amTaskSchedulersesForUtInsert,
			List<AmApplicationRoles> amApplicationRolesesForUtUpdate,
			List<AmReportParameters> amReportParametersesForUtUpdate, List<AmCompanies> amCompaniesesForUtInsert,
			List<AmApplicationRoles> amApplicationRoleses, List<AmEmailTemplates> amEmailTemplatesesForUtUpdate,
			List<AmReports> amReportsesForUtUpdate, List<AmEmailConfigs> amEmailConfigsesForUtInsert,
			List<AmCompanies> amCompaniesesForUtUpdate, List<AmReportBookings> amReportBookingsesForUtInsert,
			List<AmCompanies> amCompanieses, List<AmEmailConfigs> amEmailConfigsesForUtUpdate,
			List<AmReportBookingBlobs> amReportBookingBlobsesForUtUpdate,
			List<AmUserAccounts> amUserAccountsesForUtInsert, List<AmTaskSchedulers> amTaskSchedulersesForUtUpdate,
			List<AmReports> amReportsesForUtInsert, List<AmReportBookings> amReportBookingsesForUtUpdate,
			List<AmJobTraces> amJobTracesesForUtInsert, List<AmApplicationRoles> amApplicationRolesesForUtInsert) {
		this.id = id;
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
		this.username = username;
		this.password = password;
		this.email = email;
		this.timeout = timeout;
		this.token = token;
		this.defaultLanguage = defaultLanguage;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
		this.amEmailTemplatesesForUtInsert = amEmailTemplatesesForUtInsert;
		this.amErrorLogses = amErrorLogses;
		this.amReportParametersesForUtInsert = amReportParametersesForUtInsert;
		this.amJobTracesesForUtUpdate = amJobTracesesForUtUpdate;
		this.amUserAccountsesForUtUpdate = amUserAccountsesForUtUpdate;
		this.amReportBookingBlobsesForUtInsert = amReportBookingBlobsesForUtInsert;
		this.amTaskSchedulersesForUtInsert = amTaskSchedulersesForUtInsert;
		this.amApplicationRolesesForUtUpdate = amApplicationRolesesForUtUpdate;
		this.amReportParametersesForUtUpdate = amReportParametersesForUtUpdate;
		this.amCompaniesesForUtInsert = amCompaniesesForUtInsert;
		this.amApplicationRoleses = amApplicationRoleses;
		this.amEmailTemplatesesForUtUpdate = amEmailTemplatesesForUtUpdate;
		this.amReportsesForUtUpdate = amReportsesForUtUpdate;
		this.amEmailConfigsesForUtInsert = amEmailConfigsesForUtInsert;
		this.amCompaniesesForUtUpdate = amCompaniesesForUtUpdate;
		this.amReportBookingsesForUtInsert = amReportBookingsesForUtInsert;
		this.amCompanieses = amCompanieses;
		this.amEmailConfigsesForUtUpdate = amEmailConfigsesForUtUpdate;
		this.amReportBookingBlobsesForUtUpdate = amReportBookingBlobsesForUtUpdate;
		this.amUserAccountsesForUtInsert = amUserAccountsesForUtInsert;
		this.amTaskSchedulersesForUtUpdate = amTaskSchedulersesForUtUpdate;
		this.amReportsesForUtInsert = amReportsesForUtInsert;
		this.amReportBookingsesForUtUpdate = amReportBookingsesForUtUpdate;
		this.amJobTracesesForUtInsert = amJobTracesesForUtInsert;
		this.amApplicationRolesesForUtInsert = amApplicationRolesesForUtInsert;
	}

	@Id
	@SequenceGenerator(name = "user_gen", sequenceName = "SEQ_AM_USER_ACCOUNTS", allocationSize = 1, initialValue = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "user_gen")
	@Column(name = "ID", unique = true, nullable = false, precision = 10, scale = 0)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "TIMESTAMP", scale = 0)
	public Long getTimestamp() {
		return this.timestamp;
	}

	public void setTimestamp(Long timestamp) {
		this.timestamp = timestamp;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UT_UPDATE")
	public AmUserAccounts getAmUserAccountsByUtUpdate() {
		return this.amUserAccountsByUtUpdate;
	}

	public void setAmUserAccountsByUtUpdate(AmUserAccounts amUserAccountsByUtUpdate) {
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UT_INSERT")
	public AmUserAccounts getAmUserAccountsByUtInsert() {
		return this.amUserAccountsByUtInsert;
	}

	public void setAmUserAccountsByUtInsert(AmUserAccounts amUserAccountsByUtInsert) {
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
	}

	@Column(name = "USERNAME", unique = true, nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "PASSWORD", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "EMAIL", nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "TIMEOUT", scale = 0)
	public Long getTimeout() {
		return this.timeout;
	}

	public void setTimeout(Long timeout) {
		this.timeout = timeout;
	}

	@Column(name = "TOKEN")
	public String getToken() {
		return this.token;
	}

	public void setToken(String token) {
		this.token = token;
	}

	@Column(name = "DEFAULT_LANGUAGE", length = 10)
	public String getDefaultLanguage() {
		return this.defaultLanguage;
	}

	public void setDefaultLanguage(String defaultLanguage) {
		this.defaultLanguage = defaultLanguage;
	}

	@Column(name = "TS_INSERT", nullable = false)
	public Date getTsInsert() {
		return this.tsInsert;
	}

	public void setTsInsert(Date tsInsert) {
		this.tsInsert = tsInsert;
	}

	@Column(name = "TS_UPDATE", nullable = false)
	public Date getTsUpdate() {
		return this.tsUpdate;
	}

	public void setTsUpdate(Date tsUpdate) {
		this.tsUpdate = tsUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmEmailTemplates> getAmEmailTemplatesesForUtInsert() {
		return this.amEmailTemplatesesForUtInsert;
	}

	public void setAmEmailTemplatesesForUtInsert(List<AmEmailTemplates> amEmailTemplatesesForUtInsert) {
		this.amEmailTemplatesesForUtInsert = amEmailTemplatesesForUtInsert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccounts")
	public List<AmErrorLogs> getAmErrorLogses() {
		return this.amErrorLogses;
	}

	public void setAmErrorLogses(List<AmErrorLogs> amErrorLogses) {
		this.amErrorLogses = amErrorLogses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmReportParameters> getAmReportParametersesForUtInsert() {
		return this.amReportParametersesForUtInsert;
	}

	public void setAmReportParametersesForUtInsert(List<AmReportParameters> amReportParametersesForUtInsert) {
		this.amReportParametersesForUtInsert = amReportParametersesForUtInsert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmJobTraces> getAmJobTracesesForUtUpdate() {
		return this.amJobTracesesForUtUpdate;
	}

	public void setAmJobTracesesForUtUpdate(List<AmJobTraces> amJobTracesesForUtUpdate) {
		this.amJobTracesesForUtUpdate = amJobTracesesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmUserAccounts> getAmUserAccountsesForUtUpdate() {
		return this.amUserAccountsesForUtUpdate;
	}

	public void setAmUserAccountsesForUtUpdate(List<AmUserAccounts> amUserAccountsesForUtUpdate) {
		this.amUserAccountsesForUtUpdate = amUserAccountsesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmReportBookingBlobs> getAmReportBookingBlobsesForUtInsert() {
		return this.amReportBookingBlobsesForUtInsert;
	}

	public void setAmReportBookingBlobsesForUtInsert(List<AmReportBookingBlobs> amReportBookingBlobsesForUtInsert) {
		this.amReportBookingBlobsesForUtInsert = amReportBookingBlobsesForUtInsert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmTaskSchedulers> getAmTaskSchedulersesForUtInsert() {
		return this.amTaskSchedulersesForUtInsert;
	}

	public void setAmTaskSchedulersesForUtInsert(List<AmTaskSchedulers> amTaskSchedulersesForUtInsert) {
		this.amTaskSchedulersesForUtInsert = amTaskSchedulersesForUtInsert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmApplicationRoles> getAmApplicationRolesesForUtUpdate() {
		return this.amApplicationRolesesForUtUpdate;
	}

	public void setAmApplicationRolesesForUtUpdate(List<AmApplicationRoles> amApplicationRolesesForUtUpdate) {
		this.amApplicationRolesesForUtUpdate = amApplicationRolesesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmReportParameters> getAmReportParametersesForUtUpdate() {
		return this.amReportParametersesForUtUpdate;
	}

	public void setAmReportParametersesForUtUpdate(List<AmReportParameters> amReportParametersesForUtUpdate) {
		this.amReportParametersesForUtUpdate = amReportParametersesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmCompanies> getAmCompaniesesForUtInsert() {
		return this.amCompaniesesForUtInsert;
	}

	public void setAmCompaniesesForUtInsert(List<AmCompanies> amCompaniesesForUtInsert) {
		this.amCompaniesesForUtInsert = amCompaniesesForUtInsert;
	}

	@ManyToMany
	@JoinTable(name = "AM_USER_ROLES", joinColumns = {
			@JoinColumn(name = "AM_USER_ACCOUNT", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "AM_APPLICATION_ROLE", nullable = false, updatable = false) })
	@LazyCollection(LazyCollectionOption.FALSE)
	@Cascade(value=CascadeType.ALL)
	public List<AmApplicationRoles> getAmApplicationRoleses() {
		return this.amApplicationRoleses;
	}

	public void setAmApplicationRoleses(List<AmApplicationRoles> amApplicationRoleses) {
		this.amApplicationRoleses = amApplicationRoleses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmEmailTemplates> getAmEmailTemplatesesForUtUpdate() {
		return this.amEmailTemplatesesForUtUpdate;
	}

	public void setAmEmailTemplatesesForUtUpdate(List<AmEmailTemplates> amEmailTemplatesesForUtUpdate) {
		this.amEmailTemplatesesForUtUpdate = amEmailTemplatesesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmReports> getAmReportsesForUtUpdate() {
		return this.amReportsesForUtUpdate;
	}

	public void setAmReportsesForUtUpdate(List<AmReports> amReportsesForUtUpdate) {
		this.amReportsesForUtUpdate = amReportsesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmEmailConfigs> getAmEmailConfigsesForUtInsert() {
		return this.amEmailConfigsesForUtInsert;
	}

	public void setAmEmailConfigsesForUtInsert(List<AmEmailConfigs> amEmailConfigsesForUtInsert) {
		this.amEmailConfigsesForUtInsert = amEmailConfigsesForUtInsert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmCompanies> getAmCompaniesesForUtUpdate() {
		return this.amCompaniesesForUtUpdate;
	}

	public void setAmCompaniesesForUtUpdate(List<AmCompanies> amCompaniesesForUtUpdate) {
		this.amCompaniesesForUtUpdate = amCompaniesesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmReportBookings> getAmReportBookingsesForUtInsert() {
		return this.amReportBookingsesForUtInsert;
	}

	public void setAmReportBookingsesForUtInsert(List<AmReportBookings> amReportBookingsesForUtInsert) {
		this.amReportBookingsesForUtInsert = amReportBookingsesForUtInsert;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "AM_USER_COMPANIES", joinColumns = {
			@JoinColumn(name = "AM_USER_ACCOUNT", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "AM_COMPANY", nullable = false, updatable = false) })
	@LazyCollection(LazyCollectionOption.FALSE)
	public List<AmCompanies> getAmCompanieses() {
		return this.amCompanieses;
	}

	public void setAmCompanieses(List<AmCompanies> amCompanieses) {
		this.amCompanieses = amCompanieses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmEmailConfigs> getAmEmailConfigsesForUtUpdate() {
		return this.amEmailConfigsesForUtUpdate;
	}

	public void setAmEmailConfigsesForUtUpdate(List<AmEmailConfigs> amEmailConfigsesForUtUpdate) {
		this.amEmailConfigsesForUtUpdate = amEmailConfigsesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmReportBookingBlobs> getAmReportBookingBlobsesForUtUpdate() {
		return this.amReportBookingBlobsesForUtUpdate;
	}

	public void setAmReportBookingBlobsesForUtUpdate(List<AmReportBookingBlobs> amReportBookingBlobsesForUtUpdate) {
		this.amReportBookingBlobsesForUtUpdate = amReportBookingBlobsesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmUserAccounts> getAmUserAccountsesForUtInsert() {
		return this.amUserAccountsesForUtInsert;
	}

	public void setAmUserAccountsesForUtInsert(List<AmUserAccounts> amUserAccountsesForUtInsert) {
		this.amUserAccountsesForUtInsert = amUserAccountsesForUtInsert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmTaskSchedulers> getAmTaskSchedulersesForUtUpdate() {
		return this.amTaskSchedulersesForUtUpdate;
	}

	public void setAmTaskSchedulersesForUtUpdate(List<AmTaskSchedulers> amTaskSchedulersesForUtUpdate) {
		this.amTaskSchedulersesForUtUpdate = amTaskSchedulersesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmReports> getAmReportsesForUtInsert() {
		return this.amReportsesForUtInsert;
	}

	public void setAmReportsesForUtInsert(List<AmReports> amReportsesForUtInsert) {
		this.amReportsesForUtInsert = amReportsesForUtInsert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtUpdate")
	public List<AmReportBookings> getAmReportBookingsesForUtUpdate() {
		return this.amReportBookingsesForUtUpdate;
	}

	public void setAmReportBookingsesForUtUpdate(List<AmReportBookings> amReportBookingsesForUtUpdate) {
		this.amReportBookingsesForUtUpdate = amReportBookingsesForUtUpdate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmJobTraces> getAmJobTracesesForUtInsert() {
		return this.amJobTracesesForUtInsert;
	}

	public void setAmJobTracesesForUtInsert(List<AmJobTraces> amJobTracesesForUtInsert) {
		this.amJobTracesesForUtInsert = amJobTracesesForUtInsert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "amUserAccountsByUtInsert")
	public List<AmApplicationRoles> getAmApplicationRolesesForUtInsert() {
		return this.amApplicationRolesesForUtInsert;
	}

	public void setAmApplicationRolesesForUtInsert(List<AmApplicationRoles> amApplicationRolesesForUtInsert) {
		this.amApplicationRolesesForUtInsert = amApplicationRolesesForUtInsert;
	}

	@Override
	@Transient
	public List<AmApplicationRoles> getAuthorities() {
		return this.amApplicationRoleses;
	}

	@Override
	@Transient
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	@Transient
	public boolean isAccountNonLocked() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	@Transient
	public boolean isCredentialsNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	@Transient
	public boolean isEnabled() {
		// TODO Auto-generated method stub
		return true;
	}

}
