package it.kirey.kfuture.entity;
// Generated 03-Oct-2016 09:46:32 by Hibernate Tools 5.1.0.Beta1

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * AmReportParameters generated by hbm2java
 */
@Entity
@Table(name = "AM_REPORT_PARAMETERS")
public class AmReportParameters implements java.io.Serializable {
	private static final long serialVersionUID = 1L;
	
	private Integer id;
	
	@JsonBackReference(value = "report_parameters")
	private AmReports amReports;
	
	@JsonIgnore
	private AmUserAccounts amUserAccountsByUtInsert;
	
	@JsonIgnore
	private AmUserAccounts amUserAccountsByUtUpdate;
	
	private String name;
	private String linkedDirection;
	private String linkedPosition;
	private boolean isMandatory;
	private Long minValue;
	private Long maxValue;
	private String defaultValue;
	private String position;
	private String type;
	private String description;
	private Date tsInsert;
	private Date tsUpdate;
	
	@JsonManagedReference
	private List<AmReportBookingParameters> amReportBookingParameterses;

	public AmReportParameters() {
	}

	public AmReportParameters(Integer id, AmReports amReports, AmUserAccounts amUserAccountsByUtInsert,
			AmUserAccounts amUserAccountsByUtUpdate, String name, Date tsInsert, Date tsUpdate) {
		this.id = id;
		this.amReports = amReports;
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
		this.name = name;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
	}

	public AmReportParameters(Integer id, AmReports amReports, AmUserAccounts amUserAccountsByUtInsert,
			AmUserAccounts amUserAccountsByUtUpdate, String name, String linkedDirection, String linkedPosition,
			boolean isMandatory, Long minValue, Long maxValue, String defaultValue, String position, String type,
			String description, Date tsInsert, Date tsUpdate,
			List<AmReportBookingParameters> amReportBookingParameterses) {
		this.id = id;
		this.amReports = amReports;
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
		this.name = name;
		this.linkedDirection = linkedDirection;
		this.linkedPosition = linkedPosition;
		this.isMandatory = isMandatory;
		this.minValue = minValue;
		this.maxValue = maxValue;
		this.defaultValue = defaultValue;
		this.position = position;
		this.type = type;
		this.description = description;
		this.tsInsert = tsInsert;
		this.tsUpdate = tsUpdate;
		this.amReportBookingParameterses = amReportBookingParameterses;
	}

	@Id
	@SequenceGenerator(name = "reportparam_gen", sequenceName = "SEQ_AM_REPORT_PARAMETERS", allocationSize = 1, initialValue = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "reportparam_gen")
	@Column(name = "ID", unique = true, nullable = false, precision = 10, scale = 0)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "AM_REPORT", nullable = false)
	public AmReports getAmReports() {
		return this.amReports;
	}

	public void setAmReports(AmReports amReports) {
		this.amReports = amReports;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UT_INSERT", nullable = false)
	public AmUserAccounts getAmUserAccountsByUtInsert() {
		return this.amUserAccountsByUtInsert;
	}

	public void setAmUserAccountsByUtInsert(AmUserAccounts amUserAccountsByUtInsert) {
		this.amUserAccountsByUtInsert = amUserAccountsByUtInsert;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UT_UPDATE", nullable = false)
	public AmUserAccounts getAmUserAccountsByUtUpdate() {
		return this.amUserAccountsByUtUpdate;
	}

	public void setAmUserAccountsByUtUpdate(AmUserAccounts amUserAccountsByUtUpdate) {
		this.amUserAccountsByUtUpdate = amUserAccountsByUtUpdate;
	}

	@Column(name = "NAME", nullable = false, length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "LINKED_DIRECTION")
	public String getLinkedDirection() {
		return this.linkedDirection;
	}

	public void setLinkedDirection(String linkedDirection) {
		this.linkedDirection = linkedDirection;
	}

	@Column(name = "LINKED_POSITION")
	public String getLinkedPosition() {
		return this.linkedPosition;
	}

	public void setLinkedPosition(String linkedPosition) {
		this.linkedPosition = linkedPosition;
	}

	@Column(name = "IS_MANDATORY", precision = 1, scale = 0)
	public boolean getIsMandatory() {
		return this.isMandatory;
	}

	public void setIsMandatory(boolean isMandatory) {
		this.isMandatory = isMandatory;
	}

	@Column(name = "MIN_VALUE", precision = 22, scale = 0)
	public Long getMinValue() {
		return this.minValue;
	}

	public void setMinValue(Long minValue) {
		this.minValue = minValue;
	}

	@Column(name = "MAX_VALUE", precision = 22, scale = 0)
	public Long getMaxValue() {
		return this.maxValue;
	}

	public void setMaxValue(Long maxValue) {
		this.maxValue = maxValue;
	}

	@Column(name = "DEFAULT_VALUE")
	public String getDefaultValue() {
		return this.defaultValue;
	}

	public void setDefaultValue(String defaultValue) {
		this.defaultValue = defaultValue;
	}

	@Column(name = "POSITION")
	public String getPosition() {
		return this.position;
	}

	public void setPosition(String position) {
		this.position = position;
	}

	@Column(name = "TYPE")
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "DESCRIPTION")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "TS_INSERT", nullable = false)
	public Date getTsInsert() {
		return this.tsInsert;
	}

	public void setTsInsert(Date tsInsert) {
		this.tsInsert = tsInsert;
	}

	@Column(name = "TS_UPDATE", nullable = false)
	public Date getTsUpdate() {
		return this.tsUpdate;
	}

	public void setTsUpdate(Date tsUpdate) {
		this.tsUpdate = tsUpdate;
	}

	@OneToMany(mappedBy = "amReportParameters")
	@LazyCollection(LazyCollectionOption.FALSE)
	public List<AmReportBookingParameters> getAmReportBookingParameterses() {
		return this.amReportBookingParameterses;
	}

	public void setAmReportBookingParameterses(List<AmReportBookingParameters> amReportBookingParameterses) {
		this.amReportBookingParameterses = amReportBookingParameterses;
	}

}
